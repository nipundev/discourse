import Component from "@glimmer/component";
import { tracked } from "@glimmer/tracking";
import { action } from "@ember/object";
import { cancel } from "@ember/runloop";
import { inject as service } from "@ember/service";
import { ajax } from "discourse/lib/ajax";
import { extractError } from "discourse/lib/ajax-error";
import discourseDebounce from "discourse-common/lib/debounce";
import slugifyChannel from "discourse/plugins/chat/discourse/lib/slugify-channel";

const SLUG_MAX_LENGTH = 100;

export default class ChatModalEditChannelName extends Component {
  @service chatApi;
  @service router;
  @service siteSettings;

  @tracked editedName = this.channel.title;
  @tracked editedSlug = this.channel.slug;
  @tracked
  autoGeneratedSlug = this.channel.slug ?? slugifyChannel(this.channel);
  @tracked flash;

  #generateSlugHandler = null;

  get channel() {
    return this.args.model;
  }

  get isSaveDisabled() {
    return (
      (this.channel.title === this.editedName &&
        this.channel.slug === this.editedSlug) ||
      this.editedName?.length > this.siteSettings.max_topic_title_length ||
      this.editedSlug?.length > SLUG_MAX_LENGTH
    );
  }

  @action
  async onSave() {
    try {
      const result = await this.chatApi.updateChannel(this.channel.id, {
        name: this.editedName,
        slug: this.editedSlug || this.autoGeneratedSlug || this.channel.slug,
      });

      this.channel.title = result.channel.title;
      this.channel.slug = result.channel.slug;
      await this.args.closeModal();
      await this.router.replaceWith(
        "chat.channel",
        ...this.channel.routeModels
      );
    } catch (error) {
      this.flash = extractError(error);
    }
  }

  @action
  onChangeChatChannelName(event) {
    this.flash = null;
    this.#debouncedGenerateSlug(event?.target?.value);
  }

  @action
  onChangeChatChannelSlug() {
    this.flash = null;
    this.#debouncedGenerateSlug(this.editedName);
  }

  #debouncedGenerateSlug(name) {
    cancel(this.#generateSlugHandler);
    this.autoGeneratedSlug = "";

    if (!name) {
      return;
    }

    this.#generateSlugHandler = discourseDebounce(
      this,
      this.#generateSlug,
      name,
      300
    );
  }

  async #generateSlug(name) {
    try {
      await ajax("/slugs.json", { type: "POST", data: { name } }).then(
        (response) => {
          this.autoGeneratedSlug = response.slug;
        }
      );
    } catch (error) {
      // eslint-disable-next-line no-console
      console.log(error);
    }
  }
}
